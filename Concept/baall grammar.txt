PROGRAM -> IMPORT INSTRUCTION EXPORT

IMPORT -> epsilon | "use" FILE ";" IMPORT

INSTRUCTION -> epsilon | ASSIGNMENT INSTRUCTION | REASSIGNMENT INSTRUCTION | STATEMENT INSTRUCTION
 
ASSIGNMENT -> TYPE ":" IDENTIFIER DEFINITION

DEFINITION -> FUNCTION | CONSTANT | VARIABLE | CONST_ARRAY | VAR_ARRAY | STRUCTURE

FUNCTION -> ":=" PARAM_LIST "{" INSTRUCTION "return" EXPRESSION ";}"

PARAM_LIST -> epsilon | PARAM "," PARAM_LIST

PARAM -> TYPE ":" IDENTIFIER

CONSTANT -> ":=" EXPRESSION ";"

VARIABLE -> "=" EXPRESSION ";"

CONST_ARRAY -> ":= [" ARRAY_ELEMENT "," ARRAY_ELEMENT_LIST "];" | "(" SIZE ");"

VAR_ARRAY -> "= [" ARRAY_ELEMENT "," ARRAY_ELEMENT_LIST "];" | "(" SIZE ");"

STRUCTURE -> ":= (" PARAM "," PARAM_LIST ");"

ARRAY_ELEMENT_LIST -> "," ARRAY_ELEMENT ARRAY_LEMENT_LIST | epsilon

ARRAY_ELEMENT -> EXPRESSION | "none"

REASSIGNMENT -> IDENTIFIER "=" EXPRESSION ";"

EXPRESSION -> FUNCTION_CALL OPERATION ";" | VARIABLE_IDENTIFIER OPERATION ";" | PRIMITIVE_VALUE OPERATION ";"

OPERATION -> epsilon | OPERATOR EXPRESSION 

OPERATOR -> "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "!&" | "!|" | "!^"

FUNCTION_CALL -> FUNCTION_IDENTIFIER "(" EXPRESSION_FOR_EACH_PARAM ");"

STATEMENT -> IF_BLOCK ELSE_IF_BLOCK ELSE_BLOCK

IF_BLOCK -> BOOLEAN_VALUE "? {" INSTRUCTION "}"

BOOLEAN_VALUE -> NEGATION BOOLEAN LOGICAL_OPERATION 

NEGATION -> "!" | epsilon

LOGICAL_OPERATION -> epsilon | LOGICAL_OPERATOR BOOLEAN_VALUE

LOGICAL_OPERATOR -> "&&" | "||" 

ELSE_IF_BLOCK -> "|" IF_BLOCK ELSE_IF_BLOCK | epsilon

ELSE_BLOCK -> "| {" INSTRUCTION "}"

EXPORT -> "export {" IDENTIFIER_FOR_EACH_EXPORTED "}"