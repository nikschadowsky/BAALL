PROGRAM -> IMPORT STATEMENT EXPORT


# imports

IMPORT -> "use" _STRING ";" IMPORT | _EPSILON


# code

STATEMENT -> ASSIGNMENT ";" STATEMENT | FUNCTION_CALL ";" STATEMENT | CONTROL_STRUCTURES STATEMENT | _EPSILON

ASSIGNMENT -> DECLARATION | REASSIGNMENT

DECLARATION -> TYPE ":" IDENTIFIER "=" ELEMENT_VALUE | TYPE ":" IDENTIFIER ":=" ELEMENT_VALUE

REASSIGNMENT -> IDENTIFIER SHORTHAND_OPERATOR ELEMENT_VALUE | INCREMENT_OPERATION

ELEMENT_VALUE -> STRUCT_DEFINITION | FUNCTION_DEFINITION | EXPRESSION


# array

ARRAY_LITERAL -> "[" "]" | "[" ARRAY_ELEMENT ARRAY_ELEMENT_LIST "]"

ARRAY_ELEMENT_LIST -> "," ARRAY_ELEMENT ARRAY_ELEMENT_LIST | _EPSILON

ARRAY_ELEMENT -> EXPRESSION


# struct definition

STRUCT_DEFINITION -> "(" STRUCT_FIELD STRUCT_FIELD_LIST ")"

STRUCT_FIELD_LIST -> "," STRUCT_FIELD STRUCT_FIELD_LIST | _EPSILON

STRUCT_FIELD -> TYPE ":" IDENTIFIER


# struct initialization

STRUCT_INITIALIZATION -> "&" "(" FILLED_STRUCT_FIELD FILLED_STRUCT_FIELD_LIST ")"

FILLED_STRUCT_FIELD -> IDENTIFIER

FILLED_STRUCT_FIELD_LIST -> "," FILLED_STRUCT_FIELD FILLED_STRUCT_FIELD_LIST | _EPSILON


# function definition

FUNCTION_DEFINITION -> "{" FUNCTION_BODY "}" | FUNCTION_PARAMETER FUNCTION_PARAMETER_LIST "{" FUNCTION_BODY "}"

FUNCTION_PARAMETER_LIST -> "," FUNCTION_PARAMETER FUNCTION_PARAMETER_LIST | _EPSILON

FUNCTION_PARAMETER -> TYPE ":" IDENTIFIER

FUNCTION_BODY -> STATEMENT "return" VALUE


# function call

FUNCTION_CALL -> IDENTIFIER "(" ")" | IDENTIFIER "(" FUNCTION_ARGUMENT FUNCTION_ARGUMENT_LIST ")"

FUNCTION_ARGUMENT -> VALUE

FUNCTION_ARGUMENT_LIST -> "," FUNCTION_ARGUMENT FUNCTION_ARGUMENT_LIST | _EPSILON


# algebraic expression

EXPRESSION -> TERM OPTIONAL_OPERATION | PREFIX_OPERATOR EXPRESSION

TERM -> "(" EXPRESSION ")" | VALUE

OPTIONAL_OPERATION -> BINARY_OPERATOR EXPRESSION | _EPSILON





# If-Else, For and While Loop

CONTROL_STRUCTURES -> CONDITIONAL | FOR_LOOP | WHILE_LOOP


CONDITIONAL -> EXPRESSION "?" "{" STATEMENT "}" ELSE_BLOCK

ELSE_BLOCK -> "\|" "{" STATEMENT "}" |  "\|" EXPRESSION "{" STATEMENT "}" ELSE_BLOCK


FOR_LOOP -> "for"  IDENTIFIER "=" EXPRESSION ".." EXPRESSION OPTIONAL_FOR_INCREMENTOR  "{" STATEMENT "}"

OPTIONAL_FOR_INCREMENTOR -> "::" EXPRESSION | _EPSILON


WHILE_LOOP -> "while" EXPRESSION "{" STATEMENT "}"


VALUE -> PRIMITIVE | ARRAY_LITERAL | IDENTIFIER | FUNCTION_CALL


# miscellaneous

INCREMENT_OPERATION -> UNARY_OPERATOR IDENTIFIER | IDENTIFIER UNARY_OPERATOR

PRIMITIVE -> "none" | _STRING | _NUMBER | _BOOLEAN

BINARY_OPERATOR -> "+" | "-" | "*" | "/" | "%" | "&" | "\|" | "^"  | "<<" | ">>" | "==" | "<" | ">" | "&&" | "\|\|"

UNARY_OPERATOR -> "++" | "--"

SHORTHAND_OPERATOR -> "=" | ":=" | "+=" | "-=" | "*=" | "/=" | "&=" | "\|=" | "^="

PREFIX_OPERATOR -> "+" | "-" | "!"

TYPE -> "string" | "number" | "boolean" | "struct" | "function" | IDENTIFIER

IDENTIFIER -> _IDENTIFIER


# EXPORTS

EXPORT -> "export" "{" IDENTIFIER ADDITIONAL_EXPORTED_ELEMENTS "}" | _EPSILON

ADDITIONAL_EXPORTED_ELEMENTS -> "," IDENTIFIER ADDITIONAL_EXPORTED_ELEMENTS | _EPSILON